#!/usr/bin/env php
<?php
/**
 * @author Alberto Maturano <alberto@maturano.mx>
 */

require 'cli-config.php';

use Mensa\Member;
use Mensa\Membership;
use Mensa\Address;


$sqlMembers = <<<SQL
SELECT
    u.member_id,
    u.user_first_name,
    u.user_last_name,
    -- El campo está pero ningún registro tienen información válida
    'MASCULINO' AS user_gender,
    -- Normalizando fechas '0000-00-00' a NULL
    DATE (NULLIF (u.user_birthdate, '0000-00-00')) AS user_birthdate,
    u.user_email1,
    u.user_admission,
    NULLIF (TRIM(u.user_home_address), '') AS user_home_address,
    NULLIF (TRIM(u.user_home_extended_address), '') AS user_home_extended_address,
    u.user_home_postal_code,
    u.user_home_district,
    COALESCE (f.shortname,  f.fullname)  AS city,
    COALESCE (fs.shortname, fs.fullname) AS state,
    -- Si fecha de creación es inválida se recupera la de última modificación
    TIMESTAMP (COALESCE (
        NULLIF (u.user_timestamp_created, '0000-00-00'),
        NULLIF (u.user_timestamp_updated, '0000-00-00')
    )) AS user_timestamp_created

FROM
    users AS u
  LEFT JOIN
    features_names AS f ON f.feature_id = u.feature_id
  LEFT JOIN
    features_hierarchy AS fh
        ON fh.lft <= (SELECT lft FROM features_hierarchy WHERE feature_id = f.feature_id)
       AND fh.rgt >= (SELECT rgt FROM features_hierarchy WHERE feature_id = f.feature_id)
       AND fh.parent_id = 172
  LEFT JOIN
    features_names AS fs ON fs.feature_id = fh.feature_id

WHERE
    u.user_admission IS NOT NULL

GROUP BY u.member_id

ORDER BY u.member_id
SQL;

$sqlMemberships = <<<SQL
SELECT
    member_id,
    membership_start,
    membership_end,
    membership_card_status,
    -- Si fecha de creación es inválida se recupera la de última modificación
    TIMESTAMP (COALESCE (
        NULLIF (membership_timestamp_created, '0000-00-00'),
        NULLIF (membership_timestamp_updated, '0000-00-00')
    )) AS membership_timestamp_created

FROM
    memberships

WHERE
    COALESCE (
        NULLIF (membership_start, '0000-00-00'),
        NULLIF (membership_end,   '0000-00-00')
    ) IS NOT NULL

ORDER BY membership_timestamp_created
SQL;


try {
    $dns = $params['old_database']['driver']
        . ':dbname=' . $params['old_database']['dbname']
        . ';port='   . $params['old_database']['port']
        . ';host='   . $params['old_database']['host']
    ;

    $conn = new \PDO(
        $dns,
        $params['old_database']['user'],
        $params['old_database']['password']
    );

    // Permite ignorar la secuencia y asignar un ID manualmente
    $em->getClassMetaData('Mensa\Member')->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());

} catch (\PDOException $e) {
    // TODO
    echo 'Connection Failed: ' . $e->getMessage() . PHP_EOL;
    exit(1);
}


$sth = $conn->prepare($sqlMembers);
$sth->execute();
$results = $sth->fetchAll(\PDO::FETCH_ASSOC);

echo 'Miembros a importar: ' . count($results) . PHP_EOL;

foreach ($results as $row) {

    $member = (new Member())
        ->setId($row['member_id'])
        ->setFirstName($row['user_first_name'])
        ->setLastName($row['user_last_name'])
        ->setGender($row['user_gender'])
        ->setBirthdate($row['user_birthdate'])
        ->setEmail($row['user_email1'])
        ->setAdmissionType($row['user_admission'])
        ->setCreated($row['user_timestamp_created'])
    ;

    $address = (new Address())
        ->setMember($member)
        ->setAddressLine1($row['user_home_address'])
        ->setAddressLine2($row['user_home_extended_address'])
        ->setColony($row['user_home_district'])
        ->setCity($row['city'])
        ->setState($row['state'])
        ->setPostalCode($row['user_home_postal_code'])
    ;

    $member->setAddress($address);

    $em->persist($member);
    $em->persist($address);
}


$sth = $conn->prepare($sqlMemberships);
$sth->execute();
$results = $sth->fetchAll(\PDO::FETCH_ASSOC);

echo 'Membresías a importar: ' . count($results) . PHP_EOL;

foreach ($results as $row) {

    $membership = (new Membership())
        ->setMember($em->find('Mensa\Member', $row['member_id']))
        ->setStart($row['membership_start'])
        ->setEnd($row['membership_end'])
        ->setDelivery($row['membership_card_status'])
        ->setCreated($row['membership_timestamp_created'])
    ;

    $em->persist($membership);
}

$em->flush();

// vim: ft=php :
