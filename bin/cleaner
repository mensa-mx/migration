#!/usr/bin/env php
<?php
/**
 * @author Alberto Maturano <alberto@maturano.mx>
 */

require 'cli-config.php';

use Mensa\Migration;
use Mensa\Clean;
use Mensa\Util\Cleaner;
use Doctrine\Common\Collections\Criteria;

$metaMember = $em->getClassMetaData('Mensa\Clean\Member');

$metaMember->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());


//-- Member --//
$migMembers = $em->getRepository('\Mensa\Migration\Member')->findAll();

echo 'Miembros por procesar: ' . count($migMembers) . PHP_EOL;
foreach ($migMembers as $migMember) {

    /** @var Migration\Member $migMember */
    list($firstName, $lastName) = Cleaner::names($migMember->getFirstName(), $migMember->getLastName());

    //$gender = ($migMember->getGender() !== 'FEMENINO')
    //        ? Cleaner::gender($firstName)
    //        : $migMember->getGender();
    // Una vez identificados los casos, se hizo manual el cambio. Ver issue #7
    $gender = $migMember->getGender();

    $member = (new Clean\Member())
        ->setId($migMember->getId())
        ->setFirstName($firstName)
        ->setLastName($lastName)
        ->setGender($gender)
        ->setBirthdate(Cleaner::date($migMember->getBirthdate()))
        ->setEmail(Cleaner::email($migMember->getEmail()))
        ->setCreated(Cleaner::date($migMember->getCreated()))
        ->setAdmissionType(Cleaner::admission($migMember->getAdmissionType()))
    ;

    $em->persist($member);
}


//-- Address --//
$migAddresses = $em->getRepository('\Mensa\Migration\Address')->matching(
    Criteria::create()->orderBy(['id' => Criteria::ASC])
)->getIterator();

echo 'Direcciones por procesar: ' . count($migAddresses) . PHP_EOL;
foreach ($migAddresses as $migAddress) {
    $address = (new Clean\Address())
        /** @var Migration\Address $migAddress */
        ->setAddressLine1(Cleaner::text($migAddress->getAddressLine1()))
        ->setAddressLine2(Cleaner::text($migAddress->getAddressLine2()))
        ->setCity(Cleaner::text($migAddress->getCity()))
        ->setColony(Cleaner::text($migAddress->getColony()))
        ->setState(Cleaner::state($migAddress->getState()))
        ->setPostalCode($migAddress->getPostalCode())
    ;

    $member = $em->find('Mensa\Clean\Member', $migAddress->getMember()->getId());

    $address->setMember($member);
    $member->setAddress($address);
    $em->persist($address);
    $em->persist($member);
}


//-- Memberships --//
$migMemberships = $em->getRepository('\Mensa\Migration\Membership')->findAll();

echo 'MembresÃ­as por procesar: ' . count($migMemberships) . PHP_EOL;
foreach ($migMemberships as $migMembership) {

    $membership = (new Clean\Membership())
        /** @var Migration\Membership $migMembership */
        ->setStart(Cleaner::date($migMembership->getStart()))
        ->setEnd(Cleaner::date($migMembership->getEnd()))
        ->setDelivery($migMembership->getDelivery())
        ->setCreated(\DateTime::createFromFormat('Y-m-d H:i:s', $migMembership->getCreated()))
    ;

    $member = $em->find('Mensa\Clean\Member', $migMembership->getMember()->getId());

    $membership->setMember($member);
    $em->persist($membership);
}

$em->flush();


//-- Corrige secuencia --//
$query = <<<SQL
SELECT setval(
    '{$metaMember->sequenceGeneratorDefinition['sequenceName']}',
    (SELECT MAX(id) FROM {$metaMember->getTableName()})
)
SQL;

$em->getConnection()->prepare($query)->execute();
