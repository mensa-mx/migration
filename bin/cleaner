#!/usr/bin/env php
<?php
/**
 * @author Alberto Maturano <alberto@maturano.mx>
 */

require 'cli-config.php';

use Mensa\Migration;
use Mensa\Clean;
use Mensa\Util\Cleaner;
use Doctrine\Common\Collections\Criteria;

$metaMember = $em->getClassMetaData('Mensa\Clean\Member');

$metaMember->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());

// Lista de registros a ignorar
$noValidMembers = $params['notValidMembers'];


//-- Member --//
$migMembers = $em->getRepository('\Mensa\Migration\Member')->findAll();

echo 'Miembros por procesar: ' . count($migMembers) . PHP_EOL;
foreach ($migMembers as $migMember) {
    /** @var Migration\Member $migMember */
    if (in_array($migMember->getId(), $noValidMembers)) {
        echo '[WARN] Ignorando membresía con ID ' . $migMember->getId() . PHP_EOL;
        continue;
    }

    list($firstName, $lastName) = Cleaner::names($migMember->getFirstName(), $migMember->getLastName());

    //$gender = ($migMember->getGender() !== 'FEMENINO')
    //        ? Cleaner::gender($firstName)
    //        : $migMember->getGender();
    // Una vez identificados los casos, se hizo manual el cambio. Ver issue #7
    $gender = $migMember->getGender();

    $member = (new Clean\Member())
        ->setId($migMember->getId())
        ->setFirstName($firstName)
        ->setLastName($lastName)
        ->setGender($gender)
        ->setBirthdate(Cleaner::date($migMember->getBirthdate()))
        ->setEmail(Cleaner::email($migMember->getEmail()))
        ->setCreated(Cleaner::date($migMember->getCreated()))
        ->setAdmissionType(Cleaner::admission($migMember->getAdmissionType()))
    ;


    //-- Address --//
    $migAddress = $migMember->getAddress();
    $address = (new Clean\Address())
        /** @var Migration\Address $migAddress */
        ->setAddressLine1(Cleaner::text($migAddress->getAddressLine1()))
        ->setAddressLine2(Cleaner::text($migAddress->getAddressLine2()))
        ->setCity(Cleaner::text($migAddress->getCity()))
        ->setColony(Cleaner::text($migAddress->getColony()))
        ->setState(Cleaner::state($migAddress->getState()))
        ->setPostalCode($migAddress->getPostalCode())
        ->setMember($member)
    ;

    $member->setAddress($address);

    $em->persist($address);
    $em->persist($member);
}


//-- Memberships --//
$migMemberships = $em->getRepository('\Mensa\Migration\Membership')->findAll();

echo 'Membresías por procesar: ' . count($migMemberships) . PHP_EOL;
foreach ($migMemberships as $migMembership) {
    /** @var Clean\Membership $migMembership */
    /** @var Clean\Member $member */
    $member = $em->find('Mensa\Clean\Member', $migMembership->getMember()->getId());

    $start   = Cleaner::date($migMembership->getStart());
    $end     = Cleaner::date($migMembership->getEnd());
    $created = \DateTime::createFromFormat('Y-m-d H:i:s', $migMembership->getCreated());

    if ($end->diff($start)->days <= 1 || $end < $start) {
        // ¿Membresías de un día?, ¿que finalizan antes de comenzar? ... WTF!!
        echo '[INFO] Membresía no válida para ID ' . $member->getId() . ': '
            .  $start->format('d/m/Y') . ' - '
            .  $end->format('d/m/Y') . PHP_EOL;

        continue;
    }

    // Membresías asignadas hasta el momento
    foreach ($member->getMemberships() as $tmpMembership) {
        /** @var Clean\Membership $tmpMembership */
        $tmpStart = $tmpMembership->getStart();
        $tmpEnd   = $tmpMembership->getEnd();

        if ($start == $tmpStart && $end == $tmpEnd) {
            echo '[INFO] Membresía duplicada para ID ' . $member->getId() . ': '
                . $start->format('d/m/Y') . ' - ' . $end->format('d/m/Y') . ' vs '
                . $tmpStart->format('d/m/Y') . ' - ' . $tmpEnd->format('d/m/Y') . PHP_EOL;

            continue 2;

        } else if ($start->diff($tmpStart)->days < 3 && $end > $tmpEnd) {
            // Imagino por tratarse manualmente muchas membresías tenían diferencia apenas de unos días
            echo '[INFO] Ampliando rango de membresía para ID ' . $member->getId() . ': '
                . 'Fin de ' . $tmpEnd->format('d/m/Y') . ' a ' . $end->format('d/m/Y') . PHP_EOL;

            $tmpMembership->setEnd($end);
            $em->persist($tmpMembership);

            continue 2;

        } else if ($end == $tmpEnd && $start < $tmpStart) {
            echo '[INFO] Ampliando rango de membresía para ID ' . $member->getId() . ': '
                . 'Inicio de ' . $tmpStart->format('d/m/Y') . ' a ' . $start->format('d/m/Y') . PHP_EOL;

            $tmpMembership->setStart($start);
            $em->persist($tmpMembership);

            continue 2;

        } else if ($created->diff(new \DateTime())->days === 0 && $start < $tmpEnd) {
            echo '[INFO] Corrigiendo sobreposición de fechas en nuevas membresías para ID ' . $member->getId() . ': '
                . $start->format('d/m/Y') . ' / ' . $tmpEnd->format('d/m/Y') . PHP_EOL;

            $start->modify($tmpEnd->format('Y-m-d'))->modify('+1 day');

            break; // Continúa guardando la nueva membresía
        }
    }

    $membership = (new Clean\Membership())
        /** @var Migration\Membership $migMembership */
        ->setStart($start)
        ->setEnd($end)
        ->setDelivery(Cleaner::delivery($migMembership->getDelivery()))
        ->setCreated($created)
    ;


    $member->addMembership($membership);
    $membership->setMember($member);
    $em->persist($membership);
}

$em->flush();


//-- Corrige secuencia --//
$query = <<<SQL
SELECT setval(
    '{$metaMember->sequenceGeneratorDefinition['sequenceName']}',
    (SELECT MAX(id) FROM {$metaMember->getTableName()})
)
SQL;

$em->getConnection()->prepare($query)->execute();
