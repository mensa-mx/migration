#!/usr/bin/env php
<?php
/**
 * @author Alberto Maturano <alberto@maturano.mx>
 */

require 'cli-config.php';

use Mensa\Migration\Member;
use Mensa\Migration\Membership;
use Mensa\Migration\Address;
use Mensa\Util\Cleaner;
use Doctrine\Common\Collections\Criteria;


$results = array_map('str_getcsv', file($params['provisional_file']));

echo 'Registros a fusionar: ' . (count($results) - 1) . PHP_EOL;

$line = $regNew = $regUps = $mmbsNew = 0;
foreach ($results as $row) {
    $line++;
    if ($line === 1) { continue; } // Header...

    if (empty($row[2])) {
        echo '[ERROR] Falta ID para fila: ' . $line . PHP_EOL;
        continue;
    }


    //-- Member --//
    $member = $em->find('Mensa\Migration\Member', $row[2]);

    if ($member) {
        $isNew = false;
        $regUps++;

    } else if ( ! empty($row[6])) {
        $isNew = true;
        $regNew++;

        $member = (new Member())
            ->setId($row[2])
            ->setCreated(date('Y-m-d H:i:s'))
        ;

    } else {
        echo '[ERROR] Falta TIPO ADMISION para fila: ' . $line . PHP_EOL;
        continue;
    }

    $member->setFromArray([
        'firstName'     => $row[3],
        'lastName'      => $row[4],
        'gender'        => $row[18],
        'birthdate'     => $row[9],
        'email'         => $row[8],
        'admissionType' => $row[6],
    ]);


    //-- Address --//
    if ($isNew) {
        $address = (new Address())->setMember($member);

        $member->setAddress($address);

    } else {
        $address = $member->getAddress();
    }

    if (empty($row[12])) {
        // Pone órden a los datos de calle
        $row[12] = trim($row[11]);
        $row[11] = null;
    }

    // Limpia de cosas raras el dato de código postal
    $row[16] = str_replace([' ', '"', 'C.P.'], '', $row[16]);

    $address->setFromArray([
        'addressLine1'  => $row[12],
        'addressLine2'  => $row[11],
        'colony'        => $row[13],
        'city'          => $row[14],
        'state'         => $row[15],
        'postalCode'    => $row[16],
    ]);


    //-- Membership --//
    if ( ! empty($row[5])) {

        $end = Cleaner::date($row[5]);

        /** @var Mensa\Membership $lastMembership */
        $lastMembership = $member->getMemberships()->matching(
            Criteria::create()->orderBy(['end' => Criteria::DESC])->setMaxResults(1)
        )->first();

        $daysDiff = ($lastMembership)
            ? (new \DateTime($lastMembership->getEnd()))->diff($end)->format('%r%a')
            : 31; // Feo, pero funciona. La alternativa es meter más lógica...

        if ($isNew || $daysDiff > 30) {
            // Cualquier cosa menor a 30 días es considerada la misma membresía o es que la información de la
            // base de datos está más actualizada.
            $mmbsNew++;

            $start = ( ! empty($row[19]) )
                ? Cleaner::date($row[19])
                : new \DateTime(date('Y') . $end->format('-m-d')); // Se asume la membresía inició "este año"

            $membership = (new Membership())
                ->setMember($member)
                ->setFromArray([
                    'start'     => $start->format('Y-m-d'),
                    'end'       => $end->format('Y-m-d'),
                    'delivery'  => Cleaner::deliver($row[0]),
                    'created'   => date('Y-m-d H:i:s'),
                ])
            ;

            $em->persist($membership);
        }
    }


    $em->persist($member);
    $em->persist($address);
}

try {
    $em->flush();

} catch (\PDOException $e) {
    echo '[ERROR] ' . $e->getMessage() . PHP_EOL;
    exit(1);
}


echo 'Registros nuevos: ' . $regNew . PHP_EOL
    . 'Registros modificados: ' . $regUps . PHP_EOL
    . 'Nuevas membersías: ' . $mmbsNew . PHP_EOL
    ;
