#!/usr/bin/env php
<?php
/**
 * @author Alberto Maturano <alberto@maturano.mx>
 */

require 'cli-config.php';

use Mensa\Member;
use Mensa\Membership;
use Mensa\Address;


$sqlMembers = <<<SQL
SELECT
    u.member_id AS id,
    u.user_first_name AS firstName,
    u.user_last_name AS lastName,
    -- El campo está pero ningún registro tienen información válida
    'MASCULINO' AS gender,
    -- Normalizando fechas '0000-00-00' a NULL
    DATE (NULLIF (u.user_birthdate, '0000-00-00')) AS birthdate,
    u.user_email1 AS email,
    u.user_admission AS admissionType,
    -- Si fecha de creación es inválida se recupera la de última modificación
    TIMESTAMP (COALESCE (
        NULLIF (u.user_timestamp_created, '0000-00-00'),
        NULLIF (u.user_timestamp_updated, '0000-00-00')
    )) AS created,

    NULLIF (TRIM(u.user_home_address), '') AS addressLine1,
    NULLIF (TRIM(u.user_home_extended_address), '') AS addressLine2,
    u.user_home_postal_code AS postalCode,
    u.user_home_district AS colony,
    COALESCE (f.shortname,  f.fullname)  AS city,
    COALESCE (fs.shortname, fs.fullname) AS state

FROM
    users AS u
  LEFT JOIN
    features_names AS f ON f.feature_id = u.feature_id
  LEFT JOIN
    features_hierarchy AS fh
        ON fh.lft <= (SELECT lft FROM features_hierarchy WHERE feature_id = f.feature_id)
       AND fh.rgt >= (SELECT rgt FROM features_hierarchy WHERE feature_id = f.feature_id)
       AND fh.parent_id = 172
  LEFT JOIN
    features_names AS fs ON fs.feature_id = fh.feature_id

WHERE
    u.user_admission IS NOT NULL

GROUP BY u.member_id

ORDER BY u.member_id
SQL;

$sqlMemberships = <<<SQL
SELECT
    member_id,
    DATE (COALESCE (
        NULLIF (membership_start, '0000-00-00'),
        -- Sin fecha de inicio se analiza la de creación y si coinciden en día y mes a fecha de fin,
        -- se utiliza; en caso contrario, se asume una membresía de perido de un año.
        IF (
            DATE_FORMAT (membership_end, '%d%m') = DATE_FORMAT (membership_timestamp_created, '%d%m'),
            membership_timestamp_created,
            DATE_SUB(membership_end, INTERVAL 1 YEAR)
        )
    )) AS start,
    DATE (NULLIF (membership_end, '0000-00-00')) AS end,
    membership_card_status AS delivery,
    -- Si fecha de creación es inválida se recupera la de última modificación
    TIMESTAMP (COALESCE (
        NULLIF (membership_timestamp_created, '0000-00-00'),
        NULLIF (membership_timestamp_updated, '0000-00-00')
    )) AS created

FROM
    memberships

WHERE
    -- Se evitan sobre-análisis cuando no hay la mínima fecha útil
    NULLIF (membership_end, '0000-00-00') IS NOT NULL

ORDER BY membership_timestamp_created, member_id
SQL;


try {
    $dns = $params['old_database']['driver']
        . ':dbname=' . $params['old_database']['dbname']
        . ';port='   . $params['old_database']['port']
        . ';host='   . $params['old_database']['host']
    ;

    $conn = new \PDO(
        $dns,
        $params['old_database']['user'],
        $params['old_database']['password']
    );

    // Permite ignorar la secuencia y asignar un ID manualmente
    $em->getClassMetaData('Mensa\Member')->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());

} catch (\PDOException $e) {
    // TODO
    echo 'Connection Failed: ' . $e->getMessage() . PHP_EOL;
    exit(1);
}


$sth = $conn->prepare($sqlMembers);
$sth->execute();
$results = $sth->fetchAll(\PDO::FETCH_ASSOC);

echo 'Miembros a importar: ' . count($results) . PHP_EOL;

foreach ($results as $row) {

    $member = (new Member())
        ->setFromArray($row);

    $address = (new Address())
        ->setFromArray($row)
        ->setMember($member)
    ;

    $member->setAddress($address);

    $em->persist($member);
    $em->persist($address);
}


$sth = $conn->prepare($sqlMemberships);
$sth->execute();
$results = $sth->fetchAll(\PDO::FETCH_ASSOC);

echo 'Membresías a importar: ' . count($results) . PHP_EOL;

foreach ($results as $row) {

    $membership = (new Membership())
        ->setFromArray($row)
        ->setMember($em->find('Mensa\Member', $row['member_id']))
    ;

    $em->persist($membership);
}

$em->flush();

// vim: ft=php :
